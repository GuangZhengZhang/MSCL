//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class DeviceStatusData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceStatusData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceStatusData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceStatusData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_DeviceStatusData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DeviceStatusData() : this(msclPINVOKE.new_DeviceStatusData(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort modelNumber {
    set {
      msclPINVOKE.DeviceStatusData_modelNumber_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.DeviceStatusData_modelNumber_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DeviceStatusData.StatusSelector statusStructure {
    set {
      msclPINVOKE.DeviceStatusData_statusStructure_set(swigCPtr, (int)value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DeviceStatusData.StatusSelector ret = (DeviceStatusData.StatusSelector)msclPINVOKE.DeviceStatusData_statusStructure_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint systemTimerInMS {
    set {
      msclPINVOKE.DeviceStatusData_systemTimerInMS_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = msclPINVOKE.DeviceStatusData_systemTimerInMS_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DeviceStatusData.SystemState systemState() {
    DeviceStatusData.SystemState ret = (DeviceStatusData.SystemState)msclPINVOKE.DeviceStatusData_systemState__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void systemState(DeviceStatusData.SystemState val) {
    msclPINVOKE.DeviceStatusData_systemState__SWIG_1(swigCPtr, (int)val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool gnssPowerStateOn() {
    bool ret = msclPINVOKE.DeviceStatusData_gnssPowerStateOn__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gnssPowerStateOn(bool val) {
    msclPINVOKE.DeviceStatusData_gnssPowerStateOn__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PpsPulseInfo gnss1PpsPulseInfo() {
    PpsPulseInfo ret = new PpsPulseInfo(msclPINVOKE.DeviceStatusData_gnss1PpsPulseInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gnss1PpsPulseInfo(PpsPulseInfo val) {
    msclPINVOKE.DeviceStatusData_gnss1PpsPulseInfo__SWIG_1(swigCPtr, PpsPulseInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public StreamInfo imuStreamInfo() {
    StreamInfo ret = new StreamInfo(msclPINVOKE.DeviceStatusData_imuStreamInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void imuStreamInfo(StreamInfo val) {
    msclPINVOKE.DeviceStatusData_imuStreamInfo__SWIG_1(swigCPtr, StreamInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public StreamInfo gnssStreamInfo() {
    StreamInfo ret = new StreamInfo(msclPINVOKE.DeviceStatusData_gnssStreamInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gnssStreamInfo(StreamInfo val) {
    msclPINVOKE.DeviceStatusData_gnssStreamInfo__SWIG_1(swigCPtr, StreamInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public StreamInfo estimationFilterStreamInfo() {
    StreamInfo ret = new StreamInfo(msclPINVOKE.DeviceStatusData_estimationFilterStreamInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void estimationFilterStreamInfo(StreamInfo val) {
    msclPINVOKE.DeviceStatusData_estimationFilterStreamInfo__SWIG_1(swigCPtr, StreamInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public DeviceMessageInfo imuMessageInfo() {
    DeviceMessageInfo ret = new DeviceMessageInfo(msclPINVOKE.DeviceStatusData_imuMessageInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void imuMessageInfo(DeviceMessageInfo val) {
    msclPINVOKE.DeviceStatusData_imuMessageInfo__SWIG_1(swigCPtr, DeviceMessageInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public DeviceMessageInfo gnssMessageInfo() {
    DeviceMessageInfo ret = new DeviceMessageInfo(msclPINVOKE.DeviceStatusData_gnssMessageInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gnssMessageInfo(DeviceMessageInfo val) {
    msclPINVOKE.DeviceStatusData_gnssMessageInfo__SWIG_1(swigCPtr, DeviceMessageInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PortInfo comPortInfo() {
    PortInfo ret = new PortInfo(msclPINVOKE.DeviceStatusData_comPortInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void comPortInfo(PortInfo val) {
    msclPINVOKE.DeviceStatusData_comPortInfo__SWIG_1(swigCPtr, PortInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PortInfo usbPortInfo() {
    PortInfo ret = new PortInfo(msclPINVOKE.DeviceStatusData_usbPortInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void usbPortInfo(PortInfo val) {
    msclPINVOKE.DeviceStatusData_usbPortInfo__SWIG_1(swigCPtr, PortInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasMagnetometer() {
    bool ret = msclPINVOKE.DeviceStatusData_hasMagnetometer__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void hasMagnetometer(bool val) {
    msclPINVOKE.DeviceStatusData_hasMagnetometer__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool magnetometerInitializationFailed() {
    bool ret = msclPINVOKE.DeviceStatusData_magnetometerInitializationFailed__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void magnetometerInitializationFailed(bool val) {
    msclPINVOKE.DeviceStatusData_magnetometerInitializationFailed__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasPressure() {
    bool ret = msclPINVOKE.DeviceStatusData_hasPressure__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void hasPressure(bool val) {
    msclPINVOKE.DeviceStatusData_hasPressure__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool pressureInitializationFailed() {
    bool ret = msclPINVOKE.DeviceStatusData_pressureInitializationFailed__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void pressureInitializationFailed(bool val) {
    msclPINVOKE.DeviceStatusData_pressureInitializationFailed__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool gnssReceiverInitializationFailed() {
    bool ret = msclPINVOKE.DeviceStatusData_gnssReceiverInitializationFailed__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gnssReceiverInitializationFailed(bool val) {
    msclPINVOKE.DeviceStatusData_gnssReceiverInitializationFailed__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool coldStartOnPowerOn() {
    bool ret = msclPINVOKE.DeviceStatusData_coldStartOnPowerOn__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void coldStartOnPowerOn(bool val) {
    msclPINVOKE.DeviceStatusData_coldStartOnPowerOn__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public TemperatureInfo temperatureInfo() {
    TemperatureInfo ret = new TemperatureInfo(msclPINVOKE.DeviceStatusData_temperatureInfo__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void temperatureInfo(TemperatureInfo val) {
    msclPINVOKE.DeviceStatusData_temperatureInfo__SWIG_1(swigCPtr, TemperatureInfo.getCPtr(val));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.PowerState powerState() {
    InertialTypes.PowerState ret = (InertialTypes.PowerState)msclPINVOKE.DeviceStatusData_powerState__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void powerState(InertialTypes.PowerState val) {
    msclPINVOKE.DeviceStatusData_powerState__SWIG_1(swigCPtr, (int)val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort gyroRange() {
    ushort ret = msclPINVOKE.DeviceStatusData_gyroRange__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gyroRange(ushort val) {
    msclPINVOKE.DeviceStatusData_gyroRange__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort accelRange() {
    ushort ret = msclPINVOKE.DeviceStatusData_accelRange__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void accelRange(ushort val) {
    msclPINVOKE.DeviceStatusData_accelRange__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum StatusSelector {
    BASIC_STATUS_STRUCTURE = 0x01,
    DIAGNOSTIC_STATUS_STRUCTURE = 0x02
  }

  public enum SystemState {
    SYSTEM_INITIALIZATION = 0x0001,
    SYSTEM_STARTUP = 0x0002,
    SYSTEM_RUNNING = 0x0003
  }

}

}
