//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class RawBytePacket : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RawBytePacket(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RawBytePacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RawBytePacket() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_RawBytePacket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RawBytePacket() : this(msclPINVOKE.new_RawBytePacket(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void payload(Bytes bytes) {
    msclPINVOKE.RawBytePacket_payload__SWIG_0(swigCPtr, Bytes.getCPtr(bytes));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void type(RawBytePacket.PacketType type) {
    msclPINVOKE.RawBytePacket_type__SWIG_0(swigCPtr, (int)type);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void source(RawBytePacket.PacketSource source) {
    msclPINVOKE.RawBytePacket_source__SWIG_0(swigCPtr, (int)source);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public RawBytePacket.PacketType type() {
    RawBytePacket.PacketType ret = (RawBytePacket.PacketType)msclPINVOKE.RawBytePacket_type__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RawBytePacket.PacketSource source() {
    RawBytePacket.PacketSource ret = (RawBytePacket.PacketSource)msclPINVOKE.RawBytePacket_source__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bytes payload() {
    Bytes ret = new Bytes(msclPINVOKE.RawBytePacket_payload__SWIG_1(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum PacketType {
    INVALID_PACKET,
    DATA_PACKET,
    COMMAND_PACKET,
    NO_PACKET_FOUND
  }

  public enum PacketSource {
    FROM_READ,
    FROM_SEND
  }

}

}
