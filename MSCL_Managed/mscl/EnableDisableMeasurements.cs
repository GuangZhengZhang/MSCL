//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EnableDisableMeasurements : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EnableDisableMeasurements(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EnableDisableMeasurements obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EnableDisableMeasurements() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EnableDisableMeasurements(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public EnableDisableMeasurements() : this(msclPINVOKE.new_EnableDisableMeasurements__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EnableDisableMeasurements(ushort option) : this(msclPINVOKE.new_EnableDisableMeasurements__SWIG_1(option), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort measurementOptions {
    set {
      msclPINVOKE.EnableDisableMeasurements_measurementOptions_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.EnableDisableMeasurements_measurementOptions_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool optionEnabled(EnableDisableMeasurements.MeasurementOptions option) {
    bool ret = msclPINVOKE.EnableDisableMeasurements_optionEnabled__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool optionEnabled(ushort options) {
    bool ret = msclPINVOKE.EnableDisableMeasurements_optionEnabled__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableOption(EnableDisableMeasurements.MeasurementOptions option) {
    msclPINVOKE.EnableDisableMeasurements_enableOption__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableOption(ushort options) {
    msclPINVOKE.EnableDisableMeasurements_enableOption__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void disableOption(EnableDisableMeasurements.MeasurementOptions option) {
    msclPINVOKE.EnableDisableMeasurements_disableOption__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void disableOption(ushort options) {
    msclPINVOKE.EnableDisableMeasurements_disableOption__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum MeasurementOptions {
    ACCELEROMETER_MEASUREMENTS = 0x00000001,
    MAGNETOMETER_MEASUREMENTS = 0x00000002
  }

}

}
