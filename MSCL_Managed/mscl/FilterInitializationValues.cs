//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class FilterInitializationValues : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FilterInitializationValues(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FilterInitializationValues obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FilterInitializationValues() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_FilterInitializationValues(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FilterInitializationValues() : this(msclPINVOKE.new_FilterInitializationValues(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool autoInitialize {
    set {
      msclPINVOKE.FilterInitializationValues_autoInitialize_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = msclPINVOKE.FilterInitializationValues_autoInitialize_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FilterInitialValuesSource initialValuesSource {
    set {
      msclPINVOKE.FilterInitializationValues_initialValuesSource_set(swigCPtr, (int)value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      FilterInitialValuesSource ret = (FilterInitialValuesSource)msclPINVOKE.FilterInitializationValues_initialValuesSource_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HeadingAlignmentMethod autoHeadingAlignmentMethod {
    set {
      msclPINVOKE.FilterInitializationValues_autoHeadingAlignmentMethod_set(swigCPtr, HeadingAlignmentMethod.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.FilterInitializationValues_autoHeadingAlignmentMethod_get(swigCPtr);
      HeadingAlignmentMethod ret = (cPtr == global::System.IntPtr.Zero) ? null : new HeadingAlignmentMethod(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EulerAngles initialAttitude {
    set {
      msclPINVOKE.FilterInitializationValues_initialAttitude_set(swigCPtr, EulerAngles.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.FilterInitializationValues_initialAttitude_get(swigCPtr);
      EulerAngles ret = (cPtr == global::System.IntPtr.Zero) ? null : new EulerAngles(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Position initialPosition {
    set {
      msclPINVOKE.FilterInitializationValues_initialPosition_set(swigCPtr, Position.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.FilterInitializationValues_initialPosition_get(swigCPtr);
      Position ret = (cPtr == global::System.IntPtr.Zero) ? null : new Position(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public GeometricVector initialVelocity {
    set {
      msclPINVOKE.FilterInitializationValues_initialVelocity_set(swigCPtr, GeometricVector.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.FilterInitializationValues_initialVelocity_get(swigCPtr);
      GeometricVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeometricVector(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PositionVelocityReferenceFrame referenceFrame {
    set {
      msclPINVOKE.FilterInitializationValues_referenceFrame_set(swigCPtr, (int)value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      PositionVelocityReferenceFrame ret = (PositionVelocityReferenceFrame)msclPINVOKE.FilterInitializationValues_referenceFrame_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool manualHeading() {
    bool ret = msclPINVOKE.FilterInitializationValues_manualHeading(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool manualAttitude() {
    bool ret = msclPINVOKE.FilterInitializationValues_manualAttitude(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool manualPositionVelocity() {
    bool ret = msclPINVOKE.FilterInitializationValues_manualPositionVelocity(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
