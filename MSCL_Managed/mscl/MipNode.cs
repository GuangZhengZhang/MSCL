//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class MipNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MipNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MipNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MipNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual Bytes doCommand(byte descriptorSet, byte cmdDescriptor, Bytes fieldData, bool ackNackResponse, bool dataResponse, byte responseDataDescriptor) {
    Bytes ret = new Bytes(msclPINVOKE.MipNode_doCommand__SWIG_0(swigCPtr, descriptorSet, cmdDescriptor, Bytes.getCPtr(fieldData), ackNackResponse, dataResponse, responseDataDescriptor), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Bytes doCommand(byte descriptorSet, byte cmdDescriptor, Bytes fieldData, bool ackNackResponse, bool dataResponse) {
    Bytes ret = new Bytes(msclPINVOKE.MipNode_doCommand__SWIG_1(swigCPtr, descriptorSet, cmdDescriptor, Bytes.getCPtr(fieldData), ackNackResponse, dataResponse), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipCommandSet getConfigCommandBytes() {
    MipCommandSet ret = new MipCommandSet(msclPINVOKE.MipNode_getConfigCommandBytes(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sendCommandBytes(MipCommandSet cmds) {
    msclPINVOKE.MipNode_sendCommandBytes__SWIG_0(swigCPtr, MipCommandSet.getCPtr(cmds));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sendCommandBytes(MipCommandBytes cmd) {
    msclPINVOKE.MipNode_sendCommandBytes__SWIG_1(swigCPtr, MipCommandBytes.getCPtr(cmd));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string deviceName(string serial) {
    string ret = msclPINVOKE.MipNode_deviceName(serial);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Connection connection() {
    Connection ret = new Connection(msclPINVOKE.MipNode_connection(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipNodeFeatures features() {
    MipNodeFeatures ret = new MipNodeFeatures(msclPINVOKE.MipNode_features(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp lastCommunicationTime() {
    Timestamp ret = new Timestamp(msclPINVOKE.MipNode_lastCommunicationTime(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeviceState lastDeviceState() {
    DeviceState ret = (DeviceState)msclPINVOKE.MipNode_lastDeviceState(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Version firmwareVersion() {
    Version ret = new Version(msclPINVOKE.MipNode_firmwareVersion(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipModels.NodeModel model() {
    MipModels.NodeModel ret = (MipModels.NodeModel)msclPINVOKE.MipNode_model(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string modelName() {
    string ret = msclPINVOKE.MipNode_modelName(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string modelNumber() {
    string ret = msclPINVOKE.MipNode_modelNumber(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string serialNumber() {
    string ret = msclPINVOKE.MipNode_serialNumber(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string lotNumber() {
    string ret = msclPINVOKE.MipNode_lotNumber(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string deviceOptions() {
    string ret = msclPINVOKE.MipNode_deviceOptions(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void timeout(ulong timeout) {
    msclPINVOKE.MipNode_timeout__SWIG_0(swigCPtr, timeout);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong timeout() {
    ulong ret = msclPINVOKE.MipNode_timeout__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string name() {
    string ret = msclPINVOKE.MipNode_name(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ping() {
    bool ret = msclPINVOKE.MipNode_ping(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setToIdle() {
    msclPINVOKE.MipNode_setToIdle(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool cyclePower() {
    bool ret = msclPINVOKE.MipNode_cyclePower(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void resume() {
    msclPINVOKE.MipNode_resume(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual byte getCommunicationMode() {
    byte ret = msclPINVOKE.MipNode_getCommunicationMode(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setCommunicationMode(byte communicationMode) {
    msclPINVOKE.MipNode_setCommunicationMode(swigCPtr, communicationMode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveSettingsAsStartup(MipCommands cmdIds) {
    msclPINVOKE.MipNode_saveSettingsAsStartup__SWIG_0(swigCPtr, MipCommands.getCPtr(cmdIds));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveSettingsAsStartup() {
    msclPINVOKE.MipNode_saveSettingsAsStartup__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
