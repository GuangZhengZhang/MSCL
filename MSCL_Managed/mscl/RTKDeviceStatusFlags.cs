//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class RTKDeviceStatusFlags : Bitfield {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RTKDeviceStatusFlags(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.RTKDeviceStatusFlags_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RTKDeviceStatusFlags obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_RTKDeviceStatusFlags(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public RTKDeviceStatusFlags() : this(msclPINVOKE.new_RTKDeviceStatusFlags__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public RTKDeviceStatusFlags(uint flags) : this(msclPINVOKE.new_RTKDeviceStatusFlags__SWIG_1(flags), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte state() {
    byte ret = msclPINVOKE.RTKDeviceStatusFlags_state__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void state(byte state) {
    msclPINVOKE.RTKDeviceStatusFlags_state__SWIG_1(swigCPtr, state);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte statusCode() {
    byte ret = msclPINVOKE.RTKDeviceStatusFlags_statusCode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void statusCode(byte code) {
    msclPINVOKE.RTKDeviceStatusFlags_statusCode__SWIG_1(swigCPtr, code);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public RTKDeviceStatusFlags.ResetReason resetReason() {
    RTKDeviceStatusFlags.ResetReason ret = (RTKDeviceStatusFlags.ResetReason)msclPINVOKE.RTKDeviceStatusFlags_resetReason__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void resetReason(RTKDeviceStatusFlags.ResetReason reason) {
    msclPINVOKE.RTKDeviceStatusFlags_resetReason__SWIG_1(swigCPtr, (int)reason);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool modemPowered() {
    bool ret = msclPINVOKE.RTKDeviceStatusFlags_modemPowered__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void modemPowered(bool powered) {
    msclPINVOKE.RTKDeviceStatusFlags_modemPowered__SWIG_1(swigCPtr, powered);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool cellConnected() {
    bool ret = msclPINVOKE.RTKDeviceStatusFlags_cellConnected__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cellConnected(bool connected) {
    msclPINVOKE.RTKDeviceStatusFlags_cellConnected__SWIG_1(swigCPtr, connected);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool serverConnected() {
    bool ret = msclPINVOKE.RTKDeviceStatusFlags_serverConnected__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void serverConnected(bool connected) {
    msclPINVOKE.RTKDeviceStatusFlags_serverConnected__SWIG_1(swigCPtr, connected);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool dataEnabled() {
    bool ret = msclPINVOKE.RTKDeviceStatusFlags_dataEnabled__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dataEnabled(bool enabled) {
    msclPINVOKE.RTKDeviceStatusFlags_dataEnabled__SWIG_1(swigCPtr, enabled);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum ValueMap {
    STATE = 0x000000FF,
    STATUS_CODE = 0x0000FF00,
    RESET_REASON = 0x00030000,
    MODEM_POWERED = 0x00040000,
    CELL_CONNECTED = 0x00080000,
    SERVER_CONNECTED = 0x00100000,
    DATA_ENABLED = 0x00200000
  }

  public enum ResetReason {
    POWER_ON = 0x00,
    HARDWARE_RESET = 0x01,
    SOFT_RESET = 0x02,
    WATCHDOG_RESET = 0x03
  }

}

}
