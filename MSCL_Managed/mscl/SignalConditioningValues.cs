//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class SignalConditioningValues : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SignalConditioningValues(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SignalConditioningValues obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SignalConditioningValues() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_SignalConditioningValues(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ushort dataConditioningFlags {
    set {
      msclPINVOKE.SignalConditioningValues_dataConditioningFlags_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.SignalConditioningValues_dataConditioningFlags_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort orientationCalcDecimation {
    set {
      msclPINVOKE.SignalConditioningValues_orientationCalcDecimation_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.SignalConditioningValues_orientationCalcDecimation_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte accelGyroFilterWidth {
    set {
      msclPINVOKE.SignalConditioningValues_accelGyroFilterWidth_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      byte ret = msclPINVOKE.SignalConditioningValues_accelGyroFilterWidth_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte magFilterWidth {
    set {
      msclPINVOKE.SignalConditioningValues_magFilterWidth_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      byte ret = msclPINVOKE.SignalConditioningValues_magFilterWidth_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort upCompensation {
    set {
      msclPINVOKE.SignalConditioningValues_upCompensation_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.SignalConditioningValues_upCompensation_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort northCompensation {
    set {
      msclPINVOKE.SignalConditioningValues_northCompensation_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.SignalConditioningValues_northCompensation_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SignalConditioningValues.MagPowerBandwidthSettings magBandwidthPower {
    set {
      msclPINVOKE.SignalConditioningValues_magBandwidthPower_set(swigCPtr, (int)value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SignalConditioningValues.MagPowerBandwidthSettings ret = (SignalConditioningValues.MagPowerBandwidthSettings)msclPINVOKE.SignalConditioningValues_magBandwidthPower_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SignalConditioningValues() : this(msclPINVOKE.new_SignalConditioningValues(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool conditioningOptionOn(SignalConditioningValues.DataConditioningFlags option) {
    bool ret = msclPINVOKE.SignalConditioningValues_conditioningOptionOn__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool conditioningOptionOn(ushort options) {
    bool ret = msclPINVOKE.SignalConditioningValues_conditioningOptionOn__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setConditioningOptionOn(SignalConditioningValues.DataConditioningFlags option) {
    msclPINVOKE.SignalConditioningValues_setConditioningOptionOn__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConditioningOptionOn(ushort options) {
    msclPINVOKE.SignalConditioningValues_setConditioningOptionOn__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConditioningOptionOff(SignalConditioningValues.DataConditioningFlags option) {
    msclPINVOKE.SignalConditioningValues_setConditioningOptionOff__SWIG_0(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConditioningOptionOff(ushort options) {
    msclPINVOKE.SignalConditioningValues_setConditioningOptionOff__SWIG_1(swigCPtr, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DataConditioningFlags {
    ENABLE_ORIENTATION_CALC = 0x0001,
    ENABLE_CONING_SCULLING = 0x0002,
    ENABLE_FINITE_SIZE_CORRECTION = 0x0040,
    DISABLE_MAGNETOMETER = 0x0100,
    DISABLE_NORTH_COMP = 0x0400,
    DISABLE_UP_COMP = 0x0800,
    ENABLE_QUATERNION_CALC = 0x10000
  }

  public enum MagPowerBandwidthSettings {
    HIGH = 0,
    LOW = 1
  }

}

}
